#database connection's
import mysql.connector
import pymongo
cnx = mysql.connector.connect(user='parker', password='password', host='192.168.20.30', database='network_flows')

mongoCon = pymongo.MongoClient('mongodb://admin:password@192.168.20.31')
myDatabase = mongoCon["user_profiling"]
myCollection = myDatabase["nfdumpASNandNS"]

srcIPchange = "false"
dstIPchange = "false"
#take the nfdump file and loop through each line extracting the source IP address and destination IP address
with open("nfdumpTestFile", 'r') as captureFile:
    for captureLine in captureFile:
        printed = "false"
        if "Date" not in captureLine:
            extractedLine = captureLine.split()
            try:
                srcIP = extractedLine[5]
                dstIP = extractedLine[7]
                srcIP = str(srcIP.split(":",1)[0])
                dstIP = str(dstIP.split(":",1)[0])
            except:
                continue
# this is the asn file
            with open("asnSmall.txt", 'r') as file:
                for line in file:
                    if "Bulk mode; " not in line:
                        if "Error: " not in line:
                            asnLine = line.split()
                            try:
                                if srcIP == asnLine[2]:
                                    #print("source " + line.split("|")[-1])
                                    srcIPchange = "true"
                                    newSrc = line.split("|")[-1]
                                elif dstIP == asnLine[2]:
                                    #print("destination " + line.split("|")[-1])
                                    dstIPchange = "true"
                                    newDst = line.split("|")[-1]
                            except:
                                continue

                            if srcIPchange == "true" and dstIPchange == "true":
                                #print(extractedLine[0] + " - " + extractedLine[1] + " - " + extractedLine[4] + " - " + newSrc + " - " + newDst + " - " +  " - " + extractedLine[11] + " - " + extractedLine[12])
                                srcIPchange = "false"
                                dstIPchange = "false"

                                with open("nssmall.txt", 'r') as file:
                                    for line in file:
                                        if printed != "true":
                                            if "Authoritative" not in line:
                                                if "** server " not in line:
                                                    ipAddressReverse = str(line.split(".in-addr",1)[0])
                                                    name = str(line.split("name = ", 1)[-1])
                                                    try:
                                                        ipAddressSplit = ipAddressReverse.split(".",4)[3] + "." + ipAddressReverse.split(".",4)[2] + "." + ipAddressReverse.split(".",4)[1] + "." + ipAddressReverse.split(".",4)[0]
                                                        if srcIP == ipAddressSplit:
                                                            newSrcNS = name
                                                            srcIPchange = "true"
                                                        elif dstIP == ipAddressSplit:
                                                            newDstNS = name
                                                            dstIPchange = "true"

                                                        if srcIPchange == "true" and dstIPchange == "true":
                                                            print(extractedLine[0] + " - " + extractedLine[1] + " - " + extractedLine[4] + " - " + newSrc + " - " + newDst + " - " +  " - " + " - " + newSrcNS + " - " + newDstNS + " - " +  " - " + extractedLine[11] + " - " + extractedLine[12])
                                                            #added to prevent constant printing
                                                            srcIPchange = "false"
                                                            dstIPchange = "false"
                                                            printed = "true"

                                                            #database output
                                                            try:
                                                                #mysql
                                                                cursor = cnx.cursor()
                                                                insertData = ("INSERT INTO nfdump_data (Flow_Date, Flow_Time, Protocol, Source_Name_AS, Destination_Name_AS, Source_Name_nslookup, Destination_Name_nslookup, In_bytes, Out_bytes) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)")
                                                                data = (extractedLine[0], extractedLine[1], extractedLine[4], newSrc, newDst, newSrcNS, newDstNS, extractedLine[11], extractedLine[12])
                                                                cursor.execute(insertData, data)
                                                                cursor.close()
                                                                cnx.commit()

                                                                #mongo
                                                                myData = {"flow_date" : extractedLine[0], "flow_time" : extractedLine[1], "protocol" : extractedLine[4], "source_name_AS" : newSrc, "destination_name_AS" : newDst, "source_name_nslookup" : newSrcNS, "destination_name_nslookup" : newDstNS,"in_bytes" : extractedLine[11], "out_bytes" : extractedLine[12]}
                                                                insertIntoDB = myCollection.insert_one(myData)
                                                            except:
                                                                print("Error inserting data into the database")
                                                        
                                                    except:
                                                        continue
                                                # if the address is not found then replace the ip address with unknown
                                                else:
                                                    ipAddressUnknownRev = str(line.split(".in-addr",1)[0])
                                                    ipAddressUnknownRev = str(ipAddressUnknownRev.split("** server can't find ",1)[-1])
                                                    try:
                                                        ipAddressSplitUnk = ipAddressUnknownRev.split(".",4)[3] + "." + ipAddressUnknownRev.split(".",4)[2] + "." + ipAddressUnknownRev.split(".",4)[1] + "." + ipAddressUnknownRev.split(".",4)[0]
                                                        if srcIP == ipAddressSplitUnk:
                                                            newSrcNS = "Unknown"
                                                            srcIPchange = "true"
                                                        elif dstIP == ipAddressSplitUnk:
                                                            newDstNS = "Unknown"
                                                            dstIPchange = "true"

                                                        if srcIPchange == "true" and dstIPchange == "true":
                                                            print(extractedLine[0] + " - " + extractedLine[1] + " - " + extractedLine[4] + " - " + newSrc + " - " + newDst + " - " +  " - " + " - " + newSrcNS + " - " + newDstNS + " - " +  " - " + extractedLine[11] + " - " + extractedLine[12])
                                                            #added to prevent constant printing
                                                            srcIPchange = "false"
                                                            dstIPchange = "false"
                                                            printed = "true"
                                                            #database output
                                                            try:
                                                                #mysql
                                                                cursor = cnx.cursor()
                                                                insertData = ("INSERT INTO nfdump_data (Flow_Date, Flow_Time, Protocol, Source_Name_AS, Destination_Name_AS, Source_Name_nslookup, Destination_Name_nslookup, In_bytes, Out_bytes) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)")
                                                                data = (extractedLine[0], extractedLine[1], extractedLine[4], newSrc, newDst, newSrcNS, newDstNS, extractedLine[11], extractedLine[12])
                                                                cursor.execute(insertData, data)
                                                                cursor.close()
                                                                cnx.commit()

                                                                #mongo
                                                                myData = {"flow_date" : extractedLine[0], "flow_time" : extractedLine[1], "protocol" : extractedLine[4], "source_name_AS" : newSrc, "destination_name_AS" : newDst, "source_name_nslookup" : newSrcNS, "destination_name_nslookup" : newDstNS,"in_bytes" : extractedLine[11], "out_bytes" : extractedLine[12]}
                                                                insertIntoDB = myCollection.insert_one(myData)
                                                            except:
                                                                print("Error inserting data into the database")
                                                    except:
                                                        continue
                                # as not all lines were printed this ensures that each line is printed once the IP addresses are replaced
                                try:
                                    if printed == "false":
                                        if srcIPchange == "true" and dstIPchange == "false":
                                            newDstNS = "Unknown"
                                        if dstIPchange == "true" and srcIPchange == "false":
                                            newSrcNS = "Unknown"

                                        print(extractedLine[0] + " - " + extractedLine[1] + " - " + extractedLine[4] + " - " + newSrc + " - " + newDst + " - " +  " - " + " - " + newSrcNS + " - " + newDstNS + " - " +  " - " + extractedLine[11] + " - " + extractedLine[12])

                                        #added to prevent constant printing
                                        srcIPchange = "false"
                                        dstIPchange = "false"
                                        #database output
                                        try:
                                            #mysql
                                            cursor = cnx.cursor()
                                            insertData = ("INSERT INTO nfdump_data (Flow_Date, Flow_Time, Protocol, Source_Name_AS, Destination_Name_AS, Source_Name_nslookup, Destination_Name_nslookup, In_bytes, Out_bytes) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)")
                                            data = (extractedLine[0], extractedLine[1], extractedLine[4], newSrc, newDst, newSrcNS, newDstNS, extractedLine[11], extractedLine[12])
                                            cursor.execute(insertData, data)
                                            cursor.close()
                                            cnx.commit()

                                            #mongo
                                            myData = {"flow_date" : extractedLine[0], "flow_time" : extractedLine[1], "protocol" : extractedLine[4], "source_name_AS" : newSrc, "destination_name_AS" : newDst, "source_name_nslookup" : newSrcNS, "destination_name_nslookup" : newDstNS,"in_bytes" : extractedLine[11], "out_bytes" : extractedLine[12]}
                                            InsertIntoDB = myCollection.insert_one(myData)
                                        except:
                                            print("Error inserting data into the database")
                                except:
                                    continue

